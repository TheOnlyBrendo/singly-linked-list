package singlylinkedlist;

import static sbcc.Core.*;

import java.awt.List;
import java.io.*;
import java.util.*;

import org.apache.commons.lang3.*;

public class BasicSinglyLinkedList implements SinglyLinkedList {

	public Node top;
	public Node cursor;
	public Node cur2;
	int count = 0;

	@Override
	public Node getFirst() {

		if (top == null) {
			return null;
		} else
			return top;

	}


	@Override
	public Node getLast() {
		cursor = top;
		if (cursor == null)
			return null;
		else
			while (cursor.next != null) {
				cursor = cursor.next;
			}
		return cursor;

	}


	@Override
	public int size() {
		return count;
	}


	@Override
	public boolean isEmpty() {
		if (top == null)
			return true;
		else
			return false;
	}


	@Override
	public void clear() {
		// TODO Auto-generated method stub

	}


	@Override // inserts a new node after cursor.
	public Node insert(Node cursor, String value) {
		Node newNode = new Node(value);

		if (cursor != null) { // not inserting at top
			if (cursor.next != null) { // not at end
				newNode.next = cursor.next;
				cursor.next = newNode;
			} else { // insert at end
				cursor.next = newNode;
			}

		} else { // inserting at top
			if (top == null) { // list empty
				top = newNode;
			} else {
				newNode.next = top;
				top = newNode;
			}

		}

		count++;

		return newNode;
	}


	@Override
	public Node append(String value) {
		Node newNode = new Node(value);

		getLast();
		insert(cursor, value);

		return newNode;
	}


	@Override
	public void remove(Node cursor) {
		cur2 = top;
		if (cursor != null) {
			if (cursor == top) { // deleting top node
				if (cursor.next != null) { // not only node
					top = cursor.next;

				} else { // only node in the list
					top = null;
				}

			} else { // not deleting top node
				if (cursor.next != null) { // not the last node
					while (cur2.next != cursor) // goes 1 node behind cursor
						cur2 = cur2.next;
					cur2.next = cursor.next;

				} else { // deleting last node in list
					while (cur2.next != cursor) // goes 1 node behind cursor
						cur2 = cur2.next;

					cur2.next = null;
				}

			}
			count--;
		}

	}


	@Override
	public Node find(Node start, String key) {
		cursor = start;

		while (cursor.value != key) {
			cursor = cursor.next;
		}
		return cursor;
	}


	@Override
	public String toCsvString() {
		cursor = top;
		String s = "";

		StringBuilder sb = new StringBuilder();
		while (cursor != null) {
			sb.append(cursor).append(",");
			cursor = cursor.next;
		}

		s = sb.deleteCharAt(sb.length() - 1).toString();
		return s;
	}


	@Override
	public ArrayList<String> toList() {
		cursor = top;
		ArrayList<String> s = new ArrayList<String>();

		while (cursor != null) {
			s.add(cursor.toString());
			cursor = cursor.next;

		}
		return s;
	}


	@Override
	public void loadFile(String filename) throws IOException {
		cursor = top;

		var lines = readFileAsLines(filename);

		for (var line : lines) {
			cursor = insert(cursor, line);
		}

	}


	@Override
	public void saveFile(String filename) throws IOException {
		var list = toList();
		writeFileAsLines(filename, list);
	}

}
